@typeparam T
<div class="bg-pallette-secondary-black rounded-lg px-6 py-6">
    <h3 class="text-2xl pb-2 border-b-2 border-black text-white">@Header</h3>
    <input type=@InputType class="form-control mt-6 w-full bg-pallette-primary-black px-4 hover:bg-gray rounded-md w-[95%] py-2 border-2 border-black text-white" @bind="@InputValue" placeholder=@Placeholder />
    <p class="mt-4 text-white w-full">@Description</p>
</div>

@code {
    /// <summary>
    /// Gets or sets the header text.
    /// </summary>
    [Parameter]
    public string Header { get; set; } = "Nadpis";

    /// <summary>
    /// Gets or sets the description text.
    /// </summary>
    [Parameter]
    public string Description { get; set; } = "Popis";

    /// <summary>
    /// Gets or sets the input type.
    /// </summary>
    [Parameter]
    public string InputType { get; set; } = "text";

    /// <summary>
    /// Gets or sets the placeholder text.
    /// </summary>
    [Parameter]
    public string Placeholder { get; set; } = string.Empty;

    /// <summary>
    /// Gets or sets the value of the input.
    /// </summary>
    [Parameter]
    public T Value { get; set; } = default!;

    /// <summary>
    /// Gets or sets the event callback for value change.
    /// </summary>
    [Parameter]
    public EventCallback<T> ValueChanged { get; set; }

    /// <summary>
    /// Gets or sets the input value.
    /// </summary>
    private T InputValue
    {
        get => Value;
        set
        {
            if (!EqualityComparer<T>.Default.Equals(Value, value))
            {
                Value = value;
                ValueChanged.InvokeAsync(value);
            }
        }
    }
}